{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/FLStudioCloud/frontend/frontend/src/pages/RepoDetailsPage.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FaFileAudio, FaFileImage, FaFileCode, FaFilePdf, FaFileAlt } from 'react-icons/fa';\nimport '../styles/RepoDetailsPage.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst RepoDetailsPage = () => {\n  _s();\n  const {\n    repoName\n  } = useParams();\n  const [files, setFiles] = useState([]); // Store all files from the database\n  const [uploadedFiles, setUploadedFiles] = useState([]); // Track files uploaded locally\n\n  // File type mapping\n  const getFileIcon = fileName => {\n    const extension = fileName.split('.').pop().toLowerCase();\n    switch (extension) {\n      case 'mp3':\n      case 'wav':\n      case 'ogg':\n        return /*#__PURE__*/_jsxDEV(FaFileAudio, {\n          className: \"file-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 16\n        }, this);\n      case 'png':\n      case 'jpg':\n      case 'jpeg':\n      case 'gif':\n        return /*#__PURE__*/_jsxDEV(FaFileImage, {\n          className: \"file-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 23,\n          columnNumber: 16\n        }, this);\n      case 'html':\n      case 'css':\n      case 'js':\n      case 'jsx':\n        return /*#__PURE__*/_jsxDEV(FaFileCode, {\n          className: \"file-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 16\n        }, this);\n      case 'pdf':\n        return /*#__PURE__*/_jsxDEV(FaFilePdf, {\n          className: \"file-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 16\n        }, this);\n      default:\n        return /*#__PURE__*/_jsxDEV(FaFileAlt, {\n          className: \"file-icon\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 16\n        }, this);\n    }\n  };\n\n  // Fetch files from the backend when the component loads\n  useEffect(() => {\n    const fetchFiles = async () => {\n      try {\n        const response = await fetch(`/api/repos/${repoName}/files`);\n        if (response.ok) {\n          const data = await response.json();\n          setFiles(data.files); // Assume backend sends an array of file names\n        } else {\n          console.error('Failed to fetch files');\n        }\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    };\n    fetchFiles();\n  }, [repoName]);\n\n  // Handle file upload\n  const handleFileUpload = async event => {\n    const uploaded = Array.from(event.target.files);\n    const formData = new FormData();\n    uploaded.forEach(file => formData.append('files', file));\n    try {\n      const response = await fetch(`/api/repos/${repoName}/upload`, {\n        method: 'POST',\n        body: formData\n      });\n      if (response.ok) {\n        const newFiles = uploaded.map(file => file.name);\n        setUploadedFiles(prev => [...prev, ...newFiles]); // Add locally uploaded files\n        setFiles(prev => [...prev, ...newFiles]); // Update total file list\n      } else {\n        console.error('Failed to upload files');\n      }\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"repo-details-page\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      style: {\n        color: 'white'\n      },\n      children: [\"Repository: \", repoName]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-section\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        multiple: true,\n        onChange: handleFileUpload,\n        className: \"file-upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"file-list\",\n      children: [files.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [getFileIcon(file), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-name\",\n          children: file\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 13\n        }, this)]\n      }, `file-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)), uploadedFiles.map((file, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: [getFileIcon(file), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"file-name\",\n          children: file\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this)]\n      }, `uploaded-${index}`, true, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n_s(RepoDetailsPage, \"ew87VsfC2jDG22rWiHY+dnL7a/A=\", false, function () {\n  return [useParams];\n});\n_c = RepoDetailsPage;\nexport default RepoDetailsPage;\nvar _c;\n$RefreshReg$(_c, \"RepoDetailsPage\");","map":{"version":3,"names":["React","useState","useEffect","useParams","FaFileAudio","FaFileImage","FaFileCode","FaFilePdf","FaFileAlt","jsxDEV","_jsxDEV","RepoDetailsPage","_s","repoName","files","setFiles","uploadedFiles","setUploadedFiles","getFileIcon","fileName","extension","split","pop","toLowerCase","className","_jsxFileName","lineNumber","columnNumber","fetchFiles","response","fetch","ok","data","json","console","error","handleFileUpload","event","uploaded","Array","from","target","formData","FormData","forEach","file","append","method","body","newFiles","map","name","prev","children","style","color","type","multiple","onChange","index","_c","$RefreshReg$"],"sources":["/home/ubuntu/FLStudioCloud/frontend/frontend/src/pages/RepoDetailsPage.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { FaFileAudio, FaFileImage, FaFileCode, FaFilePdf, FaFileAlt } from 'react-icons/fa';\nimport '../styles/RepoDetailsPage.css';\n\nconst RepoDetailsPage = () => {\n  const { repoName } = useParams();\n  const [files, setFiles] = useState([]); // Store all files from the database\n  const [uploadedFiles, setUploadedFiles] = useState([]); // Track files uploaded locally\n\n  // File type mapping\n  const getFileIcon = (fileName) => {\n    const extension = fileName.split('.').pop().toLowerCase();\n    switch (extension) {\n      case 'mp3':\n      case 'wav':\n      case 'ogg':\n        return <FaFileAudio className=\"file-icon\" />;\n      case 'png':\n      case 'jpg':\n      case 'jpeg':\n      case 'gif':\n        return <FaFileImage className=\"file-icon\" />;\n      case 'html':\n      case 'css':\n      case 'js':\n      case 'jsx':\n        return <FaFileCode className=\"file-icon\" />;\n      case 'pdf':\n        return <FaFilePdf className=\"file-icon\" />;\n      default:\n        return <FaFileAlt className=\"file-icon\" />;\n    }\n  };\n\n  // Fetch files from the backend when the component loads\n  useEffect(() => {\n    const fetchFiles = async () => {\n      try {\n        const response = await fetch(`/api/repos/${repoName}/files`);\n        if (response.ok) {\n          const data = await response.json();\n          setFiles(data.files); // Assume backend sends an array of file names\n        } else {\n          console.error('Failed to fetch files');\n        }\n      } catch (error) {\n        console.error('Error fetching files:', error);\n      }\n    };\n\n    fetchFiles();\n  }, [repoName]);\n\n  // Handle file upload\n  const handleFileUpload = async (event) => {\n    const uploaded = Array.from(event.target.files);\n    const formData = new FormData();\n    uploaded.forEach((file) => formData.append('files', file));\n\n    try {\n      const response = await fetch(`/api/repos/${repoName}/upload`, {\n        method: 'POST',\n        body: formData,\n      });\n\n      if (response.ok) {\n        const newFiles = uploaded.map((file) => file.name);\n        setUploadedFiles((prev) => [...prev, ...newFiles]); // Add locally uploaded files\n        setFiles((prev) => [...prev, ...newFiles]); // Update total file list\n      } else {\n        console.error('Failed to upload files');\n      }\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    }\n  };\n\n  return (\n    <div className=\"repo-details-page\">\n      <h1 style={{ color: 'white' }}>Repository: {repoName}</h1>\n\n      {/* File upload */}\n      <div className=\"upload-section\">\n        <input\n          type=\"file\"\n          multiple\n          onChange={handleFileUpload}\n          className=\"file-upload\"\n        />\n      </div>\n\n      {/* File list */}\n      <ul className=\"file-list\">\n        {/* Render files from the database */}\n        {files.map((file, index) => (\n          <li key={`file-${index}`}>\n            {getFileIcon(file)}\n            <span className=\"file-name\">{file}</span>\n          </li>\n        ))}\n\n        {/* Render uploaded files (locally tracked) */}\n        {uploadedFiles.map((file, index) => (\n          <li key={`uploaded-${index}`}>\n            {getFileIcon(file)}\n            <span className=\"file-name\">{file}</span>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n\nexport default RepoDetailsPage;\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}